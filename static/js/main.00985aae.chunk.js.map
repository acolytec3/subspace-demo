{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["web3","Web3","dai","eth","Contract","exchangeABI","theme","global","font","family","size","height","AppBar","props","Box","tag","direction","align","alignContent","background","pad","left","right","vertical","elevation","style","zIndex","Tradelist","DataTable","columns","property","header","Text","primary","data","last5","App","daiContract","useSubspace","contract","useState","txnObserver","setObservable","last5Observable","setlast5Observable","latestBlock","setBlock","setLast5","TradeDetails","tokensSold","ethBought","this","utils","fromWei","exchangeRate","useEffect","getBlockNumber","then","block","EthPurchased$","events","EthPurchase","track","fromBlock","last5$","pipe","$latest","undefined","subscribe","trade","console","log","unsubscribe","fiveTrades","prices","map","txnDetails","tokens_sold","eth_bought","blockNumber","Grommet","margin","textAlign","reduce","a","b","rate","length","toFixed","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00985aae.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {\n    Box,\n    Grommet,\n    DataTable,\n    Text\n} from 'grommet';\nimport { pipe } from 'rxjs';\nimport {$latest} from '@embarklabs/subspace';\nimport { useSubspace } from '@embarklabs/subspace-react';\nimport exchangeABI from './contract/exchange_abi.json'\nimport Web3 from 'web3';\n\nconst web3 = new Web3(\"https://mainnet.infura.io/v3/c4809a978c5b48c8a5b8fdc9133cef42\");\nconst dai = new web3.eth.Contract(exchangeABI, '0x2a1530C4C41db0B0b2bB646CB5Eb1A67b7158667');\n\n\nconst theme = {\n    global: {\n        font: {\n            family: 'Roboto',\n            size: '18px',\n            height: '20px'\n        }\n    }\n};\n\n\nfunction App(props) {\n\n    const subspace = useSubspace();\n    const daiContract = subspace.contract(dai);\n\n    const [txnObserver, setObservable] = useState();\n    const [last5Observable, setlast5Observable] = useState();\n    const [latestBlock, setBlock] = useState();\n    const [last5, setLast5] = useState([]);\n\n    //Trade details object for calculating exchange rate\n    function TradeDetails(tokensSold, ethBought) {\n        this.tokensSold = web3.utils.fromWei(tokensSold);\n        this.ethBought = web3.utils.fromWei(ethBought);\n        this.exchangeRate = this.tokensSold / this.ethBought;\n    }\n    \n    //Effect hook to define subspace observables\n    useEffect(() => {\n        web3.eth.getBlockNumber().then((block) => setBlock(block));\n        if (typeof(latestBlock) != \"number\") \n            return;\n\n        const EthPurchased$ = daiContract.events.EthPurchase.track({\n            fromBlock: latestBlock - 50\n        });\n        const last5$ = EthPurchased$.pipe($latest(5));\n        setObservable(EthPurchased$);\n        setlast5Observable(last5$)\n    },[latestBlock])\n\n    //Effect hook to set up subscription for Uniswap DAI Contract EthPurchase event\n    useEffect(() => {\n        if ((txnObserver === undefined) || (typeof latestBlock != \"number\")) {\n            return;\n        }\n        txnObserver.subscribe((trade) => {\n            console.log(trade);\n        });\n    \n        return () => { txnObserver.unsubscribe(); }\n    }, [txnObserver, latestBlock]);\n\n    //Effect hook to source last 5 trades from EthPurchase observableyarn\n    useEffect(() => {\n        if (last5Observable === undefined) {\n            return;\n        }\n        last5Observable.subscribe((fiveTrades) => {\n            const prices = fiveTrades.map(trade => {\n                const txnDetails = new TradeDetails(trade.tokens_sold, trade.eth_bought);\n                return {'block': trade.blockNumber, 'rate': txnDetails.exchangeRate}\n            });\n            setLast5(prices);\n        });\n    \n        return () => { last5Observable.unsubscribe(); }\n    }, [last5Observable]);\n\n    return (\n        <Grommet theme={theme}>\n            <AppBar>Subspace DeFi Dashboard Demo</AppBar>\n            <Box align=\"center\">\n                <Text margin=\"medium\" textAlign=\"center\">Average Exchange Rate on 5 latest Uniswap DAI->ETH trades = {\n                    (last5.reduce((a,b) => a + b.rate, 0) / last5.length).toFixed(6)\n                }</Text>\n            </Box>\n            <Box align=\"center\"><Text textAlign=\"center\"> Last 5 DAI -> Eth Trades</Text></Box>\n            <Tradelist last5={last5}/>  </Grommet>\n    );\n}\n\nconst AppBar = (props) => (\n    <Box tag='header' direction='row' align='center' alignContent=\"center\"  background='brand'\n        pad={\n            {\n                left: 'medium',\n                right: 'small',\n                vertical: 'small'\n            }\n        }\n        elevation='medium'\n        style={\n            {zIndex: '1'}\n        }\n        {...props}/>\n);\n\nconst Tradelist = (props) => (\n    <Box direction='column' align='center' pad=\"medium\">\n        <DataTable columns={\n                [\n                    {\n                        property: 'block',\n                        header: <Text>Block</Text>,\n                   \n                    }, {\n                        property: 'rate',\n                        header: <Text>ETH/DAI</Text>,\n                        primary: true\n                    }\n                ]\n            }\n            data={\n                props.last5\n            }/>\n    </Box>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { SubspaceProvider } from '@embarklabs/subspace-react';\nimport Web3 from 'web3';\n\nconst web3 = new Web3(\"https://cloudflare-eth.com\");\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <SubspaceProvider web3={web3}>\n    <App />\n  </SubspaceProvider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}