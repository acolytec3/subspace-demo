{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["web3","Web3","subspace","Subspace","currentProvider","dai","eth","Contract","exchangeABI","daiContract","contract","init","theme","global","font","family","size","height","AppBar","props","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","App","useState","exchangeRate","trades","updateTrades","txnObserver","setObservable","latestBlock","setBlock","TradeDetails","tokensSold","ethBought","this","utils","fromWei","useEffect","getBlockNumber","then","block","console","log","EthPurchased$","events","EthPurchase","track","fromBlock","undefined","subscribe","trade","txnDetails","tokens_sold","eth_bought","unsubscribe","Grommet","Text","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"snUAOMA,EAAO,IAAIC,IAAK,iEAChBC,EAAW,IAAIC,IAASH,EAAKI,iBAC/BC,EAAM,IAAIL,EAAKM,IAAIC,SAASC,EAAY,8CACtCC,EAAcP,EAASQ,SAASL,GACtCH,EAASS,OAET,IAAMC,EAAQ,CACVC,OAAQ,CACJC,KAAM,CACFC,OAAQ,SACRC,KAAM,OACNC,OAAQ,UAiDpB,IAAMC,EAAS,SAACC,GAAD,OACX,kBAACC,EAAA,EAAD,eAAKC,IAAI,SAASC,UAAU,MAAMC,MAAM,SAASC,QAAQ,UAAUC,WAAW,QAC1EC,IACI,CACIC,KAAM,SACNC,MAAO,QACPC,SAAU,SAGlBC,UAAU,SACVC,MACI,CAACC,OAAQ,MAETb,KAeGc,EAvEf,WAAgB,IAAD,EAEoBC,mBAAS,CAACC,aAAa,IAF3C,mBAEJC,EAFI,KAEIC,EAFJ,OAG0BH,qBAH1B,mBAGJI,EAHI,KAGSC,EAHT,OAIqBL,qBAJrB,mBAIJM,EAJI,KAISC,EAJT,KAKX,SAASC,EAAcC,EAAYC,GAC/BC,KAAKF,WAAa3C,EAAK8C,MAAMC,QAAQJ,GACrCE,KAAKD,UAAY5C,EAAK8C,MAAMC,QAAQH,GACpCC,KAAKV,aAAeU,KAAKF,WAAWE,KAAKD,UA2B7C,OAxBAI,qBAAW,WAGP,GAFAhD,EAAKM,IAAI2C,iBAAiBC,MAAK,SAACC,GAAD,OAAWV,EAASU,MACnDC,QAAQC,WAAWb,GACQ,iBAAhBA,EAAX,CAEA,IAAMc,EAAgB7C,EAAY8C,OAAOC,YAAYC,MAAM,CAACC,UAAWlB,EAAc,KACrFD,EAAce,MACd,CAACf,EAAeC,IAEpBQ,qBAAW,WACP,QAAoBW,IAAhBrB,GAAqD,iBAAfE,EAU1C,OANIF,EAAYsB,WAAU,SAACC,GACnBT,QAAQC,IAAIQ,GACZ,IAAMC,EAAa,IAAIpB,EAAamB,EAAME,YAAaF,EAAMG,YAC7D3B,EAAayB,MAGdxB,EAAY2B,cACrB,CAAC3B,EAAaE,IAIZ,kBAAC0B,EAAA,EAAD,CAAStD,MAAOA,GACZ,kBAAC,EAAD,wBACA,kBAACuD,EAAA,EAAD,qDAAoD/B,EAAOD,gBClDnDiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.cccafb9c.chunk.js","sourcesContent":["import React, { useEffect, useState} from 'react';\nimport {Box, Button, Grommet, List, Text} from 'grommet';\nimport Subspace from '@embarklabs/subspace';\nimport Web3 from 'web3';\nimport {map, pipe} from \"rxjs/operators\";\nimport exchangeABI from './contract/exchange_abi.json'\n\nconst web3 = new Web3('https://mainnet.infura.io/v3/9eb527726b034638b37f37f66b0f80d7');\nconst subspace = new Subspace(web3.currentProvider);\nvar dai = new web3.eth.Contract(exchangeABI,'0x2a1530C4C41db0B0b2bB646CB5Eb1A67b7158667');\nconst daiContract = subspace.contract(dai);\nsubspace.init();\n\nconst theme = {\n    global: {\n        font: {\n            family: 'Roboto',\n            size: '18px',\n            height: '20px'\n        }\n    }\n};\n\n\nfunction App() {\n\n    const [trades, updateTrades] = useState({exchangeRate:1.0});\n    const [txnObserver, setObservable] = useState();\n    const [latestBlock, setBlock] = useState();\n    function TradeDetails (tokensSold, ethBought) {\n        this.tokensSold = web3.utils.fromWei(tokensSold);\n        this.ethBought = web3.utils.fromWei(ethBought);\n        this.exchangeRate = this.tokensSold/this.ethBought;\n    }\n\n    useEffect (() => {\n        web3.eth.getBlockNumber().then((block) => setBlock(block));\n        console.log(typeof latestBlock)\n        if (typeof(latestBlock) != \"number\")\n            return;\n        const EthPurchased$ = daiContract.events.EthPurchase.track({fromBlock: latestBlock - 10});\n        setObservable(EthPurchased$);\n      },[setObservable, latestBlock])\n\n    useEffect (() => {\n        if((txnObserver === undefined) || (typeof latestBlock != \"number\")) {\n            return;\n        }\n        else {\n            txnObserver.subscribe((trade) => {\n                console.log(trade);\n                const txnDetails = new TradeDetails(trade.tokens_sold, trade.eth_bought);\n                updateTrades(txnDetails);\n        }\n        )};\n        return txnObserver.unsubscribe;\n    },[txnObserver, latestBlock]);\n\n    \n    return (\n        <Grommet theme={theme}>\n            <AppBar>Hello Subspace!</AppBar>\n            <Text>Exchange rate on most recent ETH/DAI trade = {trades.exchangeRate}</Text>\n        </Grommet>\n    );\n}\n\nconst AppBar = (props) => (\n    <Box tag='header' direction='row' align='center' justify='between' background='brand'\n        pad={\n            {\n                left: 'medium',\n                right: 'small',\n                vertical: 'small'\n            }\n        }\n        elevation='medium'\n        style={\n            {zIndex: '1'}\n        }\n        {...props}/>\n);\n\nconst tradeList = () => (\n    <Box tag='trades' direction='column' align='center'\n        pad=\"medium\">\n            <List></List>\n        </Box>\n)\n\nconst trade = (tradeDetails) => (\n    <Box direction='row' align='center'>\n        <Text></Text>\n    </Box>\n)\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}